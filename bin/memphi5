#!/usr/bin/env python3
import sys
from argparse import ArgumentParser
from os import getenv
from os.path import exists
from subprocess import Popen
from pathlib import Path

def path_to_yaml(path):
	testcase_name = path.split("/")
	testcase_name = testcase_name[len(testcase_name) - 1]
	return "{}/{}.yaml".format(path, testcase_name)

def yaml_to_name(yaml):
	name = yaml.split(".")
	name = name[len(name) - 2]
	name = name.split("/")
	name = name[len(name) - 1]
	return name

def check_yaml(tc, app=None, sc=None):
	if not exists(tc):
		raise Exception("Testcase {} not found.".format(tc))
	
	if app is not None and not exists(app):
		raise Exception("Applications {} not found.".format(app))
	
	if sc is not None and not exists(sc):
		raise Exception("Scenario {} not found.".format(sc))

def testcase_build(platform_path, testcase_file):
	check_yaml(testcase_file)		
	sys.path.append("{}/modules".format(platform_path))
	from testcase import Testcase
	tc = Testcase(platform_path, testcase_file)
	tc.copy()
	tc.build()

def applications_build(platform_path, testcase_folder, applications_file, repodebug):
	check_yaml(path_to_yaml(testcase_folder), applications_file)	
	sys.path.append("{}/modules".format(platform_path))
	from applications import Applications
	apps = Applications(platform_path, testcase_folder, applications_file)
	apps.copy()
	apps.build(repodebug)

def scenario_build(platform_path, testcase_folder, scenario_file, skipdebug, repodebug):
	check_yaml(path_to_yaml(testcase_folder), sc=scenario_file)
	sys.path.append("{}/modules".format(platform_path))
	from scenario import Scenario
	scenario = Scenario(platform_path, testcase_folder, scenario_file)
	scenario.copy(skipdebug)
	scenario.build(repodebug)

def simulate(platform_path, debugger_path, scenario_folder, timeout, nogui, wave):
	if not exists(scenario_folder):
		raise Exception("Scenario folder {} not found.".format(scenario_folder))
	
	sys.path.append("{}/modules".format(platform_path))
	from simulation import Simulation
	simulation = Simulation(platform_path, debugger_path, scenario_folder, timeout, (not nogui), wave)
	simulation.run()

def memphis_all(platform_path, debugger_path, testcase_file, scenario_file, applications_file, timeout, nogui, wave, skipdebug, repodebug):
	testcase_build(platform_path, testcase_file)

	testcase_name = yaml_to_name(testcase_file)

	applications_build(platform_path, testcase_name, applications_file, repodebug)
	scenario_build(platform_path, testcase_name, scenario_file, skipdebug, repodebug)

	scenario_name = yaml_to_name(scenario_file)

	simulate(platform_path, debugger_path, "{}/{}".format(testcase_name, scenario_name), timeout, nogui, wave)

def debug(debugger_path, scenario_folder):
	if not exists(scenario_folder):
		raise Exception("Scenario folder {} not found.".format(scenario_folder))

	debugger = Popen(["java", "-jar", "{}/Memphis_Debugger.jar".format(debugger_path), "{}/debug/platform.cfg".format(scenario_folder)])

	try:
		debugger.wait()
	except KeyboardInterrupt:
		pass

if __name__ == "__main__":
	parser = ArgumentParser(description="MA-Memphis platform generator and simulator.")
	subparsers = parser.add_subparsers(dest="option")

	tc_parser = subparsers.add_parser("testcase", help="Generate a testcase")
	tc_parser.add_argument("TESTCASE_FILE", help="Path to testcase description (yaml)")

	app_parser = subparsers.add_parser("applications", help="Generate applications")
	app_parser.add_argument("TESTCASE_FOLDER", help="Path to generated testcase folder")
	app_parser.add_argument("APPLICATIONS_FILE", help="Path to applications description (yaml)")
	app_parser.add_argument("--repodebug", action="store_true", help="Generates repository/appstart debug files")

	sc_parser = subparsers.add_parser("scenario", help="Generate a scenario")
	sc_parser.add_argument("TESTCASE_FOLDER", help="Path to generated testcase folder")
	sc_parser.add_argument("SCENARIO_FILE", help="Path to scenario description (yaml)")
	sc_parser.add_argument("--skipdebug", action="store_true", help="Disables debugger configuration")
	sc_parser.add_argument("--repodebug", action="store_true", help="Generates repository/appstart debug files")

	sim_parser = subparsers.add_parser("simulate", help="Simulate a scenario")
	sim_parser.add_argument("SCENARIO_FOLDER", help="Path to generated scenario folder")
	sim_parser.add_argument("--timeout", help="Simulation timeout in milliseconds")
	sim_parser.add_argument("--nogui", action="store_true", help="Disables graphical debugger")
	sim_parser.add_argument("--wave", action="store_true", help="Enables wave visualization. Implies --nogui.")

	all_parser = subparsers.add_parser("all", help="Simulate a scenario")
	all_parser.add_argument("TESTCASE_FILE", help="Path to testcase description (yaml)")
	all_parser.add_argument("APPLICATIONS_FILE", help="Path to applications description (yaml)")
	all_parser.add_argument("SCENARIO_FILE", help="Path to scenario description (yaml)")
	all_parser.add_argument("--timeout", help="Simulation timeout in milliseconds")
	all_parser.add_argument("--nogui", action="store_true", help="Disables graphical debugger.")
	all_parser.add_argument("--wave", action="store_true", help="Enables wave visualization. Implies --nogui.")
	all_parser.add_argument("--skipdebug", action="store_true", help="Disables debugger configuration")
	all_parser.add_argument("--repodebug", action="store_true", help="Generates repository/appstart debug files")

	dbg_parser = subparsers.add_parser("debug", help="Runs the debugger on a previous simulation")
	dbg_parser.add_argument("SCENARIO_FOLDER", help="Path to simulated scenario folder")

	args = parser.parse_args()

	option = args.option

	nogui = False
	wave  = False

	ENV_DEBUGGER_PATH = "MEMPHIS_DEBUGGER_PATH"
	debugger_path = None
	if option == "simulate" or option == "all" or option == "debug":
		try:
			nogui = args.nogui
		except:
			pass
		if option != "debug":
			try:
				wave = args.wave
			except:
				pass
		nogui = args.nogui or args.wave
		if not nogui:
			debugger_path = getenv(ENV_DEBUGGER_PATH)
			if debugger_path is None:
				sys.exit("ERROR: "+ENV_DEBUGGER_PATH+" not defined.")
    
	timeout = -1
	if option == "simulate" or option == "all":
		try:
			timeout = int(args.timeout)
		except:
			pass

	skipdebug = False
	if option == "scenario" or option == "all":
		try:
			skipdebug = args.skipdebug
		except:
			pass
	nogui = nogui or skipdebug

	repodebug = False
	if option == "applications" or option == "scenario" or option == "all":
		try:
			repodebug = args.repodebug
		except:
			pass

	scenario_folder = ""
	if option == "simulate" or option == "debug":
		scenario_folder = args.SCENARIO_FOLDER

	if option == "debug":
		try:
			debug(debugger_path, scenario_folder)
			exit(0)
		except Exception as ex:
			sys.exit("\nERROR: {}".format(ex))

	platform_path = Path(__file__).parent.resolve().parent
	
	testcase_file = ""
	if option == "testcase" or option == "all":
		testcase_file = args.TESTCASE_FILE
	
	testcase_folder = ""
	if option == "applications" or option == "scenario":
		testcase_folder = args.TESTCASE_FOLDER

	applications_file = ""
	if option == "applications" or option == "all":
		applications_file = args.APPLICATIONS_FILE

	scenario_file = ""
	if option == "scenario" or option == "all":
		scenario_file = args.SCENARIO_FILE
 
	if option == "testcase":
		testcase_build(platform_path, testcase_file)
	elif option == "applications":
		applications_build(platform_path, testcase_folder, applications_file, repodebug)
	elif option == "scenario":
		scenario_build(platform_path, testcase_folder, scenario_file, skipdebug, repodebug)
	elif option == "simulate":
		simulate(platform_path, debugger_path, scenario_folder, timeout, nogui, wave)
	else:
		# all
		memphis_all(platform_path, debugger_path, testcase_file, scenario_file, applications_file, timeout, nogui, wave, skipdebug, repodebug)
